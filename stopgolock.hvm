{
  "labels": {
    "__end__": 178
  },
  "modules": {
    "__main__": {
      "file": "stopgolock.hny",
      "lines": [
        "# This approach to locks uses context switching! That's better than spinning.",
        "# `r = stop p` stops the current thread and stores its context in !p",
        "# `go (!p) r` adds a thread with the context in !p to the run queue.",
        "#             once the thread starts running, it resumes from the stop expression, and eventually writes its result to r.",
        "",
        "# Note: similar to C: p->f is shorthand for (!p).f",
        "",
        "# Lock API ========================================",
        "",
        "def Lock() returns result:",
        "  result = {",
        "    .acquired: False, # whether the lock is acquired",
        "    .suspended: []    # a queue of contexts (FIFO)",
        "  }",
        "",
        "def AcquireLock(lock):",
        "  atomically:",
        "    if (lock->acquired): # if the lock is already acquired",
        "      stop ?lock->suspended[len (lock->suspended)] # stop the current thread and store its context in the lock's suspension queue",
        "    else: # if the lock is not acquired atm",
        "      lock->acquired = True # just take it",
        "",
        "def ReleaseLock(lock):",
        "  atomically:",
        "    assert lock->acquired # precondition: the lock is acquired",
        "    if ((len (lock->suspended)) > 0): # if there are threads waiting for the lock",
        "      go (lock->suspended[0]) None # start the first thread in the queue",
        "      del lock->suspended[0] # remove the thread from the queue",
        "    else: # if there are no threads waiting for the lock",
        "      lock->acquired = False # release the lock",
        "",
        "# Example ======================================== Same as in `spinlock.hny`",
        "",
        "const N_THREADS = 3",
        "",
        "num_threads_in_crit_sect = 0",
        "invariant num_threads_in_crit_sect in {0, 1}",
        "",
        "done = {:}",
        "for i in {1..N_THREADS}:",
        "  done[i] = False",
        "",
        "demo_output = \"\"",
        "",
        "thelock = Lock()",
        "",
        "def thread(pid):",
        "  while not done[pid]:",
        "    AcquireLock(?thelock) # `?thelock` is used to specify that we pass the pointer to the lock, rather than the lock itself",
        "",
        "    atomically num_threads_in_crit_sect = num_threads_in_crit_sect + 1",
        "    # begin critical section",
        "    global demo_output",
        "    demo_output += (str pid)",
        "    print demo_output # note this only prints pid!! -- not the whole accumulated string",
        "                      # this is because the print statement is NOT atomic!",
        "    # end critical section",
        "    atomically num_threads_in_crit_sect = num_threads_in_crit_sect - 1",
        "",
        "    done[pid] = True",
        "    ReleaseLock(?thelock)",
        "",
        "for i in {1..N_THREADS}:",
        "  spawn thread(i)"
      ],
      "identifiers": {
        "lock": "local-const",
        "N_THREADS": "constant",
        "i": "local-const",
        "pid": "local-const",
        "this": "local-var",
        "Lock": "constant",
        "AcquireLock": "constant",
        "ReleaseLock": "constant",
        "thread": "constant",
        "num_threads_in_crit_sect": "global",
        "done": "global",
        "demo_output": "global",
        "thelock": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Jump", "pc": "87" },
    { "op": "Frame", "name": "Lock", "args": "()" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Push", "value": { "type": "atom", "value": "acquired" } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "Push", "value": { "type": "atom", "value": "suspended" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 3, "value": "DictAdd" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "87" },
    { "op": "Frame", "name": "AcquireLock", "args": "lock" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "Push", "value": { "type": "atom", "value": "acquired" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "35", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "lock" },
    { "op": "Push", "value": { "type": "atom", "value": "suspended" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Push", "value": { "type": "atom", "value": "suspended" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Stop" },
    { "op": "Continue" },
    { "op": "Pop" },
    { "op": "Jump", "pc": "41" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Push", "value": { "type": "atom", "value": "acquired" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "87" },
    { "op": "Frame", "name": "ReleaseLock", "args": "lock" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "AtomicInc", "lazy": "True" },
    { "op": "ReadonlyInc" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "Push", "value": { "type": "atom", "value": "acquired" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Assert" },
    { "op": "ReadonlyDec" },
    { "op": "AtomicDec" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "Push", "value": { "type": "atom", "value": "suspended" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": ">" },
    { "op": "JumpCond", "pc": "79", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address" } },
    { "op": "LoadVar", "value": "lock" },
    { "op": "Push", "value": { "type": "atom", "value": "suspended" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Go" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Push", "value": { "type": "atom", "value": "suspended" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Del" },
    { "op": "Jump", "pc": "85" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Push", "value": { "type": "atom", "value": "acquired" } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "Jump", "pc": "100" },
    { "op": "Frame", "name": "invariant", "args": "()" },
    { "op": "Load", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Assert" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Invariant", "pre": "False", "pc": "90" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "done"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Push", "value": { "type": "int", "value": 3 } },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "116", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "done" }] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "107" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "atom", "value": "" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "demo_output"}] },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Apply", "value": { "type": "pc", "value": "2" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "thelock"}] },
    { "op": "Jump", "pc": "162" },
    { "op": "Frame", "name": "thread", "args": "pid" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "done" }] } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "160", "cond": { "type": "bool", "value": "True" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "thelock" }] } },
    { "op": "Apply", "value": { "type": "pc", "value": "14" } },
    { "op": "Pop" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "AtomicDec" },
    { "op": "Load", "value": [{ "type": "atom", "value": "demo_output"}] },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 1, "value": "str" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "demo_output"}] },
    { "op": "Load", "value": [{ "type": "atom", "value": "demo_output"}] },
    { "op": "Print" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "done" }] } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "thelock" }] } },
    { "op": "Apply", "value": { "type": "pc", "value": "44" } },
    { "op": "Pop" },
    { "op": "Jump", "pc": "124" },
    { "op": "DelVar", "value": "pid" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Push", "value": { "type": "int", "value": 3 } },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "175", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "123" }, "args": [] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "166" },
    { "op": "DelVar", "value": "i" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Jump 87","jump over method definition: set program counter to 87"],
    ["Frame Lock()","start of method Lock"],
    ["DelVar result","delete method variable result"],
    ["Push {:}","push constant {:}"],
    ["Push \"acquired\"","push constant \"acquired\""],
    ["Push False","push constant False"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["Push \"suspended\"","push constant \"suspended\""],
    ["Push ()","push constant ()"],
    ["3-ary DictAdd","pop 3 values and push the result of applying DictAdd"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 87","jump over method definition: set program counter to 87"],
    ["Frame AcquireLock(lock)","start of method AcquireLock"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar lock","push the value of lock"],
    ["Push \"acquired\"","push constant \"acquired\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond False 35","pop a value and jump to 35 if the value is False"],
    ["LoadVar lock","push the value of lock"],
    ["Push \"suspended\"","push constant \"suspended\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["LoadVar lock","push the value of lock"],
    ["DelVar lock","delete method variable lock"],
    ["Push \"suspended\"","push constant \"suspended\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Stop","pop an address and store context at that address"],
    ["Continue","a no-op, must follow a Stop or Save operation"],
    ["Pop","discard the top value on the stack"],
    ["Jump 41","set program counter to 41"],
    ["LoadVar lock","push the value of lock"],
    ["DelVar lock","delete method variable lock"],
    ["Push \"acquired\"","push constant \"acquired\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 87","jump over method definition: set program counter to 87"],
    ["Frame ReleaseLock(lock)","start of method ReleaseLock"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["AtomicInc(lazy)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["ReadonlyInc","increment readonly counter of context; thread cannot mutate shared variables if > 0"],
    ["LoadVar lock","push the value of lock"],
    ["Push \"acquired\"","push constant \"acquired\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReadonlyDec","decrement readonly counter of context"],
    ["AtomicDec","decrement atomic counter of context"],
    ["LoadVar lock","push the value of lock"],
    ["Push \"suspended\"","push constant \"suspended\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary >","pop 2 values and push the result of applying >"],
    ["JumpCond False 79","pop a value and jump to 79 if the value is False"],
    ["Push None","push constant None"],
    ["LoadVar lock","push the value of lock"],
    ["Push \"suspended\"","push constant \"suspended\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["Go","pops a context and a value, restores the corresponding thread, and pushes the value on its stack"],
    ["LoadVar lock","push the value of lock"],
    ["DelVar lock","delete method variable lock"],
    ["Push \"suspended\"","push constant \"suspended\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Del","pop an address and delete the shared variable at the address"],
    ["Jump 85","set program counter to 85"],
    ["LoadVar lock","push the value of lock"],
    ["DelVar lock","delete method variable lock"],
    ["Push \"acquired\"","push constant \"acquired\""],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push 0","push constant 0"],
    ["Store num_threads_in_crit_sect","pop a value and store it in shared variable num_threads_in_crit_sect"],
    ["Jump 100","jump over invariant definition: set program counter to 100"],
    ["Frame invariant()","start of method invariant"],
    ["Load num_threads_in_crit_sect","push value of shared variable num_threads_in_crit_sect"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Invariant 90","test invariant"],
    ["Push {:}","push constant {:}"],
    ["Store done","pop a value and store it in shared variable done"],
    ["Push 1","push constant 1"],
    ["Push 3","push constant 3"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 116","check if loop is done: pop a value and jump to 116 if the value is False"],
    ["Push ?done","push constant ?done"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 107","set program counter to 107"],
    ["DelVar i","delete method variable i"],
    ["Push \"\"","push constant \"\""],
    ["Store demo_output","pop a value and store it in shared variable demo_output"],
    ["Push ()","push constant ()"],
    ["Apply PC(2)","call method PC(2)"],
    ["Store thelock","pop a value and store it in shared variable thelock"],
    ["Jump 162","jump over method definition: set program counter to 162"],
    ["Frame thread(pid)","start of method thread"],
    ["Push ?done","push constant ?done"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond True 160","pop a value and jump to 160 if the value is True"],
    ["Push ?thelock","push constant ?thelock"],
    ["Apply PC(14)","call method PC(14)"],
    ["Pop","discard the top value on the stack"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load num_threads_in_crit_sect","push value of shared variable num_threads_in_crit_sect"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store num_threads_in_crit_sect","pop a value and store it in shared variable num_threads_in_crit_sect"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Load demo_output","push value of shared variable demo_output"],
    ["LoadVar pid","push the value of pid"],
    ["1-ary str","pop 1 value and push the result of applying str"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store demo_output","pop a value and store it in shared variable demo_output"],
    ["Load demo_output","push value of shared variable demo_output"],
    ["Print","pop a value and add to print history"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load num_threads_in_crit_sect","push value of shared variable num_threads_in_crit_sect"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store num_threads_in_crit_sect","pop a value and store it in shared variable num_threads_in_crit_sect"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?done","push constant ?done"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push ?thelock","push constant ?thelock"],
    ["Apply PC(44)","call method PC(44)"],
    ["Pop","discard the top value on the stack"],
    ["Jump 124","set program counter to 124"],
    ["DelVar pid","delete method variable pid"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push 1","push constant 1"],
    ["Push 3","push constant 3"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 175","check if loop is done: pop a value and jump to 175 if the value is False"],
    ["Push ?PC(123)","push constant ?PC(123)"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 166","set program counter to 166"],
    ["DelVar i","delete method variable i"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 10, "column": 1, "endline": 65, "endcolumn": 6, "stmt": [10,1,65,6] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 10, "endcolumn": 3, "stmt": [10,1,10,26] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 10, "endcolumn": 26, "stmt": [10,1,10,26] },
    { "module": "__main__", "line": 12, "column": 5, "endline": 13, "endcolumn": 18, "stmt": [11,3,14,3] },
    { "module": "__main__", "line": 12, "column": 5, "endline": 13, "endcolumn": 18, "stmt": [11,3,14,3] },
    { "module": "__main__", "line": 12, "column": 5, "endline": 12, "endcolumn": 13, "stmt": [11,3,14,3] },
    { "module": "__main__", "line": 12, "column": 16, "endline": 12, "endcolumn": 20, "stmt": [11,3,14,3] },
    { "module": "__main__", "line": 12, "column": 5, "endline": 13, "endcolumn": 18, "stmt": [11,3,14,3] },
    { "module": "__main__", "line": 13, "column": 5, "endline": 13, "endcolumn": 14, "stmt": [11,3,14,3] },
    { "module": "__main__", "line": 13, "column": 17, "endline": 13, "endcolumn": 18, "stmt": [11,3,14,3] },
    { "module": "__main__", "line": 12, "column": 5, "endline": 13, "endcolumn": 18, "stmt": [11,3,14,3] },
    { "module": "__main__", "line": 11, "column": 3, "endline": 11, "endcolumn": 10, "stmt": [11,3,14,3] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 10, "endcolumn": 26, "stmt": [10,1,10,26] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 3, "stmt": [16,1,16,22] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 22, "stmt": [16,1,16,22] },
    { "module": "__main__", "line": 17, "column": 3, "endline": 17, "endcolumn": 13, "stmt": [17,3,17,13] },
    { "module": "__main__", "line": 18, "column": 9, "endline": 18, "endcolumn": 12, "stmt": [18,5,18,24] },
    { "module": "__main__", "line": 18, "column": 15, "endline": 18, "endcolumn": 22, "stmt": [18,5,18,24] },
    { "module": "__main__", "line": 18, "column": 9, "endline": 18, "endcolumn": 22, "stmt": [18,5,18,24] },
    { "module": "__main__", "line": 18, "column": 9, "endline": 18, "endcolumn": 22, "stmt": [18,5,18,24] },
    { "module": "__main__", "line": 18, "column": 5, "endline": 18, "endcolumn": 6, "stmt": [18,5,18,24] },
    { "module": "__main__", "line": 19, "column": 13, "endline": 19, "endcolumn": 16, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 19, "endline": 19, "endcolumn": 27, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 13, "endline": 19, "endcolumn": 27, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 34, "endline": 19, "endcolumn": 37, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 34, "endline": 19, "endcolumn": 37, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 40, "endline": 19, "endcolumn": 48, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 34, "endline": 19, "endcolumn": 48, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 34, "endline": 19, "endcolumn": 48, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 29, "endline": 19, "endcolumn": 49, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 13, "endline": 19, "endcolumn": 50, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 7, "endline": 19, "endcolumn": 50, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 7, "endline": 19, "endcolumn": 50, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 19, "column": 7, "endline": 19, "endcolumn": 50, "stmt": [19,7,19,50] },
    { "module": "__main__", "line": 18, "column": 5, "endline": 18, "endcolumn": 24, "stmt": [18,5,18,24] },
    { "module": "__main__", "line": 21, "column": 7, "endline": 21, "endcolumn": 10, "stmt": [21,7,21,27] },
    { "module": "__main__", "line": 21, "column": 7, "endline": 21, "endcolumn": 10, "stmt": [21,7,21,27] },
    { "module": "__main__", "line": 21, "column": 13, "endline": 21, "endcolumn": 20, "stmt": [21,7,21,27] },
    { "module": "__main__", "line": 21, "column": 7, "endline": 21, "endcolumn": 20, "stmt": [21,7,21,27] },
    { "module": "__main__", "line": 21, "column": 24, "endline": 21, "endcolumn": 27, "stmt": [21,7,21,27] },
    { "module": "__main__", "line": 21, "column": 7, "endline": 21, "endcolumn": 22, "stmt": [21,7,21,27] },
    { "module": "__main__", "line": 17, "column": 3, "endline": 17, "endcolumn": 13, "stmt": [17,3,17,13] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 22, "stmt": [16,1,16,22] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 3, "stmt": [23,1,23,22] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 22, "stmt": [23,1,23,22] },
    { "module": "__main__", "line": 24, "column": 3, "endline": 24, "endcolumn": 13, "stmt": [24,3,24,13] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 25, "stmt": [25,5,25,25] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 25, "stmt": [25,5,25,25] },
    { "module": "__main__", "line": 25, "column": 12, "endline": 25, "endcolumn": 15, "stmt": [25,5,25,25] },
    { "module": "__main__", "line": 25, "column": 18, "endline": 25, "endcolumn": 25, "stmt": [25,5,25,25] },
    { "module": "__main__", "line": 25, "column": 12, "endline": 25, "endcolumn": 25, "stmt": [25,5,25,25] },
    { "module": "__main__", "line": 25, "column": 12, "endline": 25, "endcolumn": 25, "stmt": [25,5,25,25] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 10, "stmt": [25,5,25,25] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 25, "stmt": [25,5,25,25] },
    { "module": "__main__", "line": 25, "column": 5, "endline": 25, "endcolumn": 25, "stmt": [25,5,25,25] },
    { "module": "__main__", "line": 26, "column": 15, "endline": 26, "endcolumn": 18, "stmt": [26,5,26,37] },
    { "module": "__main__", "line": 26, "column": 21, "endline": 26, "endcolumn": 29, "stmt": [26,5,26,37] },
    { "module": "__main__", "line": 26, "column": 15, "endline": 26, "endcolumn": 29, "stmt": [26,5,26,37] },
    { "module": "__main__", "line": 26, "column": 15, "endline": 26, "endcolumn": 29, "stmt": [26,5,26,37] },
    { "module": "__main__", "line": 26, "column": 10, "endline": 26, "endcolumn": 30, "stmt": [26,5,26,37] },
    { "module": "__main__", "line": 26, "column": 35, "endline": 26, "endcolumn": 35, "stmt": [26,5,26,37] },
    { "module": "__main__", "line": 26, "column": 9, "endline": 26, "endcolumn": 35, "stmt": [26,5,26,37] },
    { "module": "__main__", "line": 26, "column": 5, "endline": 26, "endcolumn": 6, "stmt": [26,5,26,37] },
    { "module": "__main__", "line": 27, "column": 31, "endline": 27, "endcolumn": 34, "stmt": [27,7,27,34] },
    { "module": "__main__", "line": 27, "column": 11, "endline": 27, "endcolumn": 14, "stmt": [27,7,27,34] },
    { "module": "__main__", "line": 27, "column": 17, "endline": 27, "endcolumn": 25, "stmt": [27,7,27,34] },
    { "module": "__main__", "line": 27, "column": 11, "endline": 27, "endcolumn": 25, "stmt": [27,7,27,34] },
    { "module": "__main__", "line": 27, "column": 27, "endline": 27, "endcolumn": 27, "stmt": [27,7,27,34] },
    { "module": "__main__", "line": 27, "column": 11, "endline": 27, "endcolumn": 28, "stmt": [27,7,27,34] },
    { "module": "__main__", "line": 27, "column": 11, "endline": 27, "endcolumn": 28, "stmt": [27,7,27,34] },
    { "module": "__main__", "line": 27, "column": 7, "endline": 27, "endcolumn": 34, "stmt": [27,7,27,34] },
    { "module": "__main__", "line": 28, "column": 11, "endline": 28, "endcolumn": 14, "stmt": [28,7,28,28] },
    { "module": "__main__", "line": 28, "column": 11, "endline": 28, "endcolumn": 14, "stmt": [28,7,28,28] },
    { "module": "__main__", "line": 28, "column": 17, "endline": 28, "endcolumn": 25, "stmt": [28,7,28,28] },
    { "module": "__main__", "line": 28, "column": 11, "endline": 28, "endcolumn": 25, "stmt": [28,7,28,28] },
    { "module": "__main__", "line": 28, "column": 27, "endline": 28, "endcolumn": 27, "stmt": [28,7,28,28] },
    { "module": "__main__", "line": 28, "column": 11, "endline": 28, "endcolumn": 28, "stmt": [28,7,28,28] },
    { "module": "__main__", "line": 28, "column": 7, "endline": 28, "endcolumn": 28, "stmt": [28,7,28,28] },
    { "module": "__main__", "line": 26, "column": 5, "endline": 26, "endcolumn": 37, "stmt": [26,5,26,37] },
    { "module": "__main__", "line": 30, "column": 7, "endline": 30, "endcolumn": 10, "stmt": [30,7,30,28] },
    { "module": "__main__", "line": 30, "column": 7, "endline": 30, "endcolumn": 10, "stmt": [30,7,30,28] },
    { "module": "__main__", "line": 30, "column": 13, "endline": 30, "endcolumn": 20, "stmt": [30,7,30,28] },
    { "module": "__main__", "line": 30, "column": 7, "endline": 30, "endcolumn": 20, "stmt": [30,7,30,28] },
    { "module": "__main__", "line": 30, "column": 24, "endline": 30, "endcolumn": 28, "stmt": [30,7,30,28] },
    { "module": "__main__", "line": 30, "column": 7, "endline": 30, "endcolumn": 22, "stmt": [30,7,30,28] },
    { "module": "__main__", "line": 24, "column": 3, "endline": 24, "endcolumn": 13, "stmt": [24,3,24,13] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 22, "stmt": [23,1,23,22] },
    { "module": "__main__", "line": 36, "column": 28, "endline": 36, "endcolumn": 28, "stmt": [36,1,36,28] },
    { "module": "__main__", "line": 36, "column": 1, "endline": 36, "endcolumn": 26, "stmt": [36,1,36,28] },
    { "module": "__main__", "line": 37, "column": 1, "endline": 37, "endcolumn": 9, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 1, "endline": 37, "endcolumn": 44, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 11, "endline": 37, "endcolumn": 34, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 40, "endline": 37, "endcolumn": 43, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 40, "endline": 37, "endcolumn": 40, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 40, "endline": 37, "endcolumn": 43, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 43, "endline": 37, "endcolumn": 43, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 40, "endline": 37, "endcolumn": 43, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 11, "endline": 37, "endcolumn": 44, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 1, "endline": 37, "endcolumn": 44, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 1, "endline": 37, "endcolumn": 44, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 37, "column": 1, "endline": 37, "endcolumn": 44, "stmt": [37,1,37,44] },
    { "module": "__main__", "line": 39, "column": 8, "endline": 39, "endcolumn": 10, "stmt": [39,1,39,10] },
    { "module": "__main__", "line": 39, "column": 1, "endline": 39, "endcolumn": 6, "stmt": [39,1,39,10] },
    { "module": "__main__", "line": 40, "column": 11, "endline": 40, "endcolumn": 11, "stmt": [40,1,40,23] },
    { "module": "__main__", "line": 40, "column": 14, "endline": 40, "endcolumn": 22, "stmt": [40,1,40,23] },
    { "module": "__main__", "line": 40, "column": 11, "endline": 40, "endcolumn": 22, "stmt": [40,1,40,23] },
    { "module": "__main__", "line": 40, "column": 1, "endline": 40, "endcolumn": 3, "stmt": [40,1,40,23] },
    { "module": "__main__", "line": 40, "column": 1, "endline": 40, "endcolumn": 3, "stmt": [40,1,40,23] },
    { "module": "__main__", "line": 40, "column": 1, "endline": 40, "endcolumn": 3, "stmt": [40,1,40,23] },
    { "module": "__main__", "line": 41, "column": 3, "endline": 41, "endcolumn": 6, "stmt": [41,3,41,17] },
    { "module": "__main__", "line": 41, "column": 8, "endline": 41, "endcolumn": 8, "stmt": [41,3,41,17] },
    { "module": "__main__", "line": 41, "column": 8, "endline": 41, "endcolumn": 8, "stmt": [41,3,41,17] },
    { "module": "__main__", "line": 41, "column": 3, "endline": 41, "endcolumn": 9, "stmt": [41,3,41,17] },
    { "module": "__main__", "line": 41, "column": 13, "endline": 41, "endcolumn": 17, "stmt": [41,3,41,17] },
    { "module": "__main__", "line": 41, "column": 3, "endline": 41, "endcolumn": 11, "stmt": [41,3,41,17] },
    { "module": "__main__", "line": 40, "column": 23, "endline": 40, "endcolumn": 23, "stmt": [40,1,40,23] },
    { "module": "__main__", "line": 43, "column": 15, "endline": 43, "endcolumn": 16, "stmt": [43,1,43,16] },
    { "module": "__main__", "line": 43, "column": 15, "endline": 43, "endcolumn": 16, "stmt": [43,1,43,16] },
    { "module": "__main__", "line": 43, "column": 1, "endline": 43, "endcolumn": 13, "stmt": [43,1,43,16] },
    { "module": "__main__", "line": 45, "column": 15, "endline": 45, "endcolumn": 16, "stmt": [45,1,45,16] },
    { "module": "__main__", "line": 45, "column": 11, "endline": 45, "endcolumn": 16, "stmt": [45,1,45,16] },
    { "module": "__main__", "line": 45, "column": 1, "endline": 45, "endcolumn": 9, "stmt": [45,1,45,16] },
    { "module": "__main__", "line": 47, "column": 1, "endline": 47, "endcolumn": 3, "stmt": [47,1,47,16] },
    { "module": "__main__", "line": 47, "column": 1, "endline": 47, "endcolumn": 16, "stmt": [47,1,47,16] },
    { "module": "__main__", "line": 48, "column": 13, "endline": 48, "endcolumn": 21, "stmt": [48,3,48,22] },
    { "module": "__main__", "line": 48, "column": 18, "endline": 48, "endcolumn": 20, "stmt": [48,3,48,22] },
    { "module": "__main__", "line": 48, "column": 13, "endline": 48, "endcolumn": 21, "stmt": [48,3,48,22] },
    { "module": "__main__", "line": 48, "column": 13, "endline": 48, "endcolumn": 21, "stmt": [48,3,48,22] },
    { "module": "__main__", "line": 48, "column": 3, "endline": 48, "endcolumn": 7, "stmt": [48,3,48,22] },
    { "module": "__main__", "line": 49, "column": 18, "endline": 49, "endcolumn": 24, "stmt": [49,5,49,25] },
    { "module": "__main__", "line": 49, "column": 5, "endline": 49, "endcolumn": 25, "stmt": [49,5,49,25] },
    { "module": "__main__", "line": 49, "column": 5, "endline": 49, "endcolumn": 25, "stmt": [49,5,49,25] },
    { "module": "__main__", "line": 51, "column": 16, "endline": 51, "endcolumn": 70, "stmt": [51,16,51,70] },
    { "module": "__main__", "line": 51, "column": 43, "endline": 51, "endcolumn": 66, "stmt": [51,16,51,70] },
    { "module": "__main__", "line": 51, "column": 70, "endline": 51, "endcolumn": 70, "stmt": [51,16,51,70] },
    { "module": "__main__", "line": 51, "column": 43, "endline": 51, "endcolumn": 70, "stmt": [51,16,51,70] },
    { "module": "__main__", "line": 51, "column": 16, "endline": 51, "endcolumn": 41, "stmt": [51,16,51,70] },
    { "module": "__main__", "line": 51, "column": 16, "endline": 51, "endcolumn": 70, "stmt": [51,16,51,70] },
    { "module": "__main__", "line": 54, "column": 5, "endline": 54, "endcolumn": 28, "stmt": [54,5,54,28] },
    { "module": "__main__", "line": 54, "column": 25, "endline": 54, "endcolumn": 27, "stmt": [54,5,54,28] },
    { "module": "__main__", "line": 54, "column": 21, "endline": 54, "endcolumn": 27, "stmt": [54,5,54,28] },
    { "module": "__main__", "line": 54, "column": 5, "endline": 54, "endcolumn": 28, "stmt": [54,5,54,28] },
    { "module": "__main__", "line": 54, "column": 5, "endline": 54, "endcolumn": 18, "stmt": [54,5,54,28] },
    { "module": "__main__", "line": 55, "column": 11, "endline": 55, "endcolumn": 21, "stmt": [55,5,55,21] },
    { "module": "__main__", "line": 55, "column": 5, "endline": 55, "endcolumn": 21, "stmt": [55,5,55,21] },
    { "module": "__main__", "line": 58, "column": 16, "endline": 58, "endcolumn": 70, "stmt": [58,16,58,70] },
    { "module": "__main__", "line": 58, "column": 43, "endline": 58, "endcolumn": 66, "stmt": [58,16,58,70] },
    { "module": "__main__", "line": 58, "column": 70, "endline": 58, "endcolumn": 70, "stmt": [58,16,58,70] },
    { "module": "__main__", "line": 58, "column": 43, "endline": 58, "endcolumn": 70, "stmt": [58,16,58,70] },
    { "module": "__main__", "line": 58, "column": 16, "endline": 58, "endcolumn": 41, "stmt": [58,16,58,70] },
    { "module": "__main__", "line": 58, "column": 16, "endline": 58, "endcolumn": 70, "stmt": [58,16,58,70] },
    { "module": "__main__", "line": 60, "column": 5, "endline": 60, "endcolumn": 8, "stmt": [60,5,60,20] },
    { "module": "__main__", "line": 60, "column": 10, "endline": 60, "endcolumn": 12, "stmt": [60,5,60,20] },
    { "module": "__main__", "line": 60, "column": 5, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,20] },
    { "module": "__main__", "line": 60, "column": 17, "endline": 60, "endcolumn": 20, "stmt": [60,5,60,20] },
    { "module": "__main__", "line": 60, "column": 5, "endline": 60, "endcolumn": 15, "stmt": [60,5,60,20] },
    { "module": "__main__", "line": 61, "column": 18, "endline": 61, "endcolumn": 24, "stmt": [61,5,61,25] },
    { "module": "__main__", "line": 61, "column": 5, "endline": 61, "endcolumn": 25, "stmt": [61,5,61,25] },
    { "module": "__main__", "line": 61, "column": 5, "endline": 61, "endcolumn": 25, "stmt": [61,5,61,25] },
    { "module": "__main__", "line": 48, "column": 3, "endline": 48, "endcolumn": 22, "stmt": [48,3,48,22] },
    { "module": "__main__", "line": 47, "column": 1, "endline": 47, "endcolumn": 16, "stmt": [47,1,47,16] },
    { "module": "__main__", "line": 47, "column": 1, "endline": 47, "endcolumn": 16, "stmt": [47,1,47,16] },
    { "module": "__main__", "line": 63, "column": 11, "endline": 63, "endcolumn": 11, "stmt": [63,1,63,23] },
    { "module": "__main__", "line": 63, "column": 14, "endline": 63, "endcolumn": 22, "stmt": [63,1,63,23] },
    { "module": "__main__", "line": 63, "column": 11, "endline": 63, "endcolumn": 22, "stmt": [63,1,63,23] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 3, "stmt": [63,1,63,23] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 3, "stmt": [63,1,63,23] },
    { "module": "__main__", "line": 63, "column": 1, "endline": 63, "endcolumn": 3, "stmt": [63,1,63,23] },
    { "module": "__main__", "line": 64, "column": 9, "endline": 64, "endcolumn": 14, "stmt": [64,3,64,17] },
    { "module": "__main__", "line": 64, "column": 16, "endline": 64, "endcolumn": 16, "stmt": [64,3,64,17] },
    { "module": "__main__", "line": 64, "column": 16, "endline": 64, "endcolumn": 16, "stmt": [64,3,64,17] },
    { "module": "__main__", "line": 64, "column": 9, "endline": 64, "endcolumn": 17, "stmt": [64,3,64,17] },
    { "module": "__main__", "line": 64, "column": 3, "endline": 64, "endcolumn": 17, "stmt": [64,3,64,17] },
    { "module": "__main__", "line": 64, "column": 3, "endline": 64, "endcolumn": 17, "stmt": [64,3,64,17] },
    { "module": "__main__", "line": 63, "column": 23, "endline": 63, "endcolumn": 23, "stmt": [63,1,63,23] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 65, "endcolumn": 6, "stmt": [10,1,65,6] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 65, "endcolumn": 6, "stmt": [10,1,65,6] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 65, "endcolumn": 6, "stmt": [10,1,65,6] }
  ]
}
