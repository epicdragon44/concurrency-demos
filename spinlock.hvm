{
  "labels": {
    "__end__": 140
  },
  "modules": {
    "__main__": {
      "file": "spinlock.hny",
      "lines": [
        "# This won't work for when threads on the same core need to synchronize",
        "# - If the OS uses pre-emption (interrupting a long-running thread to run a higher-priority (more interactive) thread),",
        "#   this approach wastes CPU cycles as a thread waits on its spinlock.",
        "# - If the OS doesn't use pre-emption, this approach can lead to priority inversion",
        "#   (a high-priority thread is blocked by a low-priority thread that holds the spinlock, and no thread can make progress).",
        "",
        "# Library functions ===========================================================",
        "",
        "# test and set is a primitive operation that atomically sets a pointer to a value and returns the old value it held.",
        "def test_and_set(s) returns result: # `returns` is used to specify the variable that should be returned by the function, and which will be assigned to over the course of the function",
        "  atomically: # `atomically` is used to specify that the following block of code executes all at once",
        "    result = !s # `!s` is used to read the value of the pointer `s`",
        "    !s = True",
        "",
        "# atomic_store is a primitive operation that atomically sets a pointer to a value.",
        "def atomic_store(p, v):",
        "  atomically:",
        "    !p = v",
        "",
        "# Lock API ====================================================================",
        "",
        "# You'll see by using a lock, unlike for Peterson's, threads always enter and exit the lock in the same order as they request it (FIFO).",
        "",
        "def Lock() returns result:",
        "  result = False",
        "",
        "def AcquireLock(lock):",
        "  while test_and_set(lock):",
        "    pass",
        "",
        "def ReleaseLock(lock):",
        "  atomic_store(lock, False)",
        "",
        "# Example usage ===============================================================",
        "",
        "const N_THREADS = 3",
        "",
        "num_threads_in_crit_sect = 0",
        "invariant num_threads_in_crit_sect in {0, 1}",
        "",
        "done = {:}",
        "for i in {1..N_THREADS}:",
        "  done[i] = False",
        "",
        "demo_output = \"\"",
        "",
        "thelock = Lock()",
        "",
        "def thread(pid):",
        "  while not done[pid]:",
        "    AcquireLock(?thelock) # `?thelock` is used to specify that we pass the pointer to the lock, rather than the lock itself",
        "",
        "    atomically num_threads_in_crit_sect = num_threads_in_crit_sect + 1",
        "    # begin critical section",
        "    global demo_output",
        "    demo_output += (str pid)",
        "    print demo_output",
        "    # end critical section",
        "    atomically num_threads_in_crit_sect = num_threads_in_crit_sect - 1",
        "",
        "    done[pid] = True",
        "    ReleaseLock(?thelock)",
        "",
        "for i in {1..N_THREADS}:",
        "  spawn thread(i)",
        ""
      ],
      "identifiers": {
        "s": "local-const",
        "p": "local-const",
        "v": "local-const",
        "lock": "local-const",
        "N_THREADS": "constant",
        "i": "local-const",
        "pid": "local-const",
        "this": "local-var",
        "test_and_set": "constant",
        "atomic_store": "constant",
        "Lock": "constant",
        "AcquireLock": "constant",
        "ReleaseLock": "constant",
        "thread": "constant",
        "num_threads_in_crit_sect": "global",
        "done": "global",
        "demo_output": "global",
        "thelock": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Jump", "pc": "49" },
    { "op": "Frame", "name": "test_and_set", "args": "s" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "49" },
    { "op": "Frame", "name": "atomic_store", "args": "(p, v)" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "LoadVar", "value": "p" },
    { "op": "DelVar", "value": "p" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Store" },
    { "op": "AtomicDec" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "49" },
    { "op": "Frame", "name": "Lock", "args": "()" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "49" },
    { "op": "Frame", "name": "AcquireLock", "args": "lock" },
    { "op": "LoadVar", "value": "lock" },
    { "op": "Apply", "value": { "type": "pc", "value": "2" } },
    { "op": "JumpCond", "pc": "36", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "32" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "49" },
    { "op": "Frame", "name": "ReleaseLock", "args": "lock" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "lock" },
    { "op": "DelVar", "value": "lock" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "15" } },
    { "op": "Pop" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "Jump", "pc": "62" },
    { "op": "Frame", "name": "invariant", "args": "()" },
    { "op": "Load", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Assert" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Invariant", "pre": "False", "pc": "52" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Store", "value": [{ "type": "atom", "value": "done"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Push", "value": { "type": "int", "value": 3 } },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "78", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "done" }] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "69" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "atom", "value": "" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "demo_output"}] },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Apply", "value": { "type": "pc", "value": "25" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "thelock"}] },
    { "op": "Jump", "pc": "124" },
    { "op": "Frame", "name": "thread", "args": "pid" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "done" }] } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "122", "cond": { "type": "bool", "value": "True" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "thelock" }] } },
    { "op": "Apply", "value": { "type": "pc", "value": "31" } },
    { "op": "Pop" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "AtomicDec" },
    { "op": "Load", "value": [{ "type": "atom", "value": "demo_output"}] },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 1, "value": "str" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "demo_output"}] },
    { "op": "Load", "value": [{ "type": "atom", "value": "demo_output"}] },
    { "op": "Print" },
    { "op": "AtomicInc", "lazy": "False" },
    { "op": "Load", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "num_threads_in_crit_sect"}] },
    { "op": "AtomicDec" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "done" }] } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "thelock" }] } },
    { "op": "Apply", "value": { "type": "pc", "value": "39" } },
    { "op": "Pop" },
    { "op": "Jump", "pc": "86" },
    { "op": "DelVar", "value": "pid" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Push", "value": { "type": "int", "value": 3 } },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "137", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "85" }, "args": [] } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Jump", "pc": "128" },
    { "op": "DelVar", "value": "i" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Jump 49","jump over method definition: set program counter to 49"],
    ["Frame test_and_set(s)","start of method test_and_set"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 49","jump over method definition: set program counter to 49"],
    ["Frame atomic_store(p, v)","start of method atomic_store"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["LoadVar p","push the value of p"],
    ["DelVar p","delete method variable p"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["Store","pop a value and an address and store the value at the address"],
    ["AtomicDec","decrement atomic counter of context"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 49","jump over method definition: set program counter to 49"],
    ["Frame Lock()","start of method Lock"],
    ["DelVar result","delete method variable result"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 49","jump over method definition: set program counter to 49"],
    ["Frame AcquireLock(lock)","start of method AcquireLock"],
    ["LoadVar lock","push the value of lock"],
    ["Apply PC(2)","call method PC(2)"],
    ["JumpCond False 36","pop a value and jump to 36 if the value is False"],
    ["Jump 32","set program counter to 32"],
    ["DelVar lock","delete method variable lock"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 49","jump over method definition: set program counter to 49"],
    ["Frame ReleaseLock(lock)","start of method ReleaseLock"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar lock","push the value of lock"],
    ["DelVar lock","delete method variable lock"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(15)","call method PC(15)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push 0","push constant 0"],
    ["Store num_threads_in_crit_sect","pop a value and store it in shared variable num_threads_in_crit_sect"],
    ["Jump 62","jump over invariant definition: set program counter to 62"],
    ["Frame invariant()","start of method invariant"],
    ["Load num_threads_in_crit_sect","push value of shared variable num_threads_in_crit_sect"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Invariant 52","test invariant"],
    ["Push {:}","push constant {:}"],
    ["Store done","pop a value and store it in shared variable done"],
    ["Push 1","push constant 1"],
    ["Push 3","push constant 3"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 78","check if loop is done: pop a value and jump to 78 if the value is False"],
    ["Push ?done","push constant ?done"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 69","set program counter to 69"],
    ["DelVar i","delete method variable i"],
    ["Push \"\"","push constant \"\""],
    ["Store demo_output","pop a value and store it in shared variable demo_output"],
    ["Push ()","push constant ()"],
    ["Apply PC(25)","call method PC(25)"],
    ["Store thelock","pop a value and store it in shared variable thelock"],
    ["Jump 124","jump over method definition: set program counter to 124"],
    ["Frame thread(pid)","start of method thread"],
    ["Push ?done","push constant ?done"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond True 122","pop a value and jump to 122 if the value is True"],
    ["Push ?thelock","push constant ?thelock"],
    ["Apply PC(31)","call method PC(31)"],
    ["Pop","discard the top value on the stack"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load num_threads_in_crit_sect","push value of shared variable num_threads_in_crit_sect"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store num_threads_in_crit_sect","pop a value and store it in shared variable num_threads_in_crit_sect"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Load demo_output","push value of shared variable demo_output"],
    ["LoadVar pid","push the value of pid"],
    ["1-ary str","pop 1 value and push the result of applying str"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store demo_output","pop a value and store it in shared variable demo_output"],
    ["Load demo_output","push value of shared variable demo_output"],
    ["Print","pop a value and add to print history"],
    ["AtomicInc(eager)","increment atomic counter of context; thread runs uninterrupted if larger than 0"],
    ["Load num_threads_in_crit_sect","push value of shared variable num_threads_in_crit_sect"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store num_threads_in_crit_sect","pop a value and store it in shared variable num_threads_in_crit_sect"],
    ["AtomicDec","decrement atomic counter of context"],
    ["Push ?done","push constant ?done"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push ?thelock","push constant ?thelock"],
    ["Apply PC(39)","call method PC(39)"],
    ["Pop","discard the top value on the stack"],
    ["Jump 86","set program counter to 86"],
    ["DelVar pid","delete method variable pid"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push 1","push constant 1"],
    ["Push 3","push constant 3"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 137","check if loop is done: pop a value and jump to 137 if the value is False"],
    ["Push ?PC(85)","push constant ?PC(85)"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["Jump 128","set program counter to 128"],
    ["DelVar i","delete method variable i"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 10, "column": 1, "endline": 67, "endcolumn": 6, "stmt": [10,1,67,6] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 10, "endcolumn": 3, "stmt": [10,1,10,35] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 10, "endcolumn": 35, "stmt": [10,1,10,35] },
    { "module": "__main__", "line": 11, "column": 3, "endline": 11, "endcolumn": 13, "stmt": [11,3,11,13] },
    { "module": "__main__", "line": 11, "column": 3, "endline": 11, "endcolumn": 13, "stmt": [11,3,11,13] },
    { "module": "__main__", "line": 12, "column": 15, "endline": 12, "endcolumn": 15, "stmt": [12,5,12,15] },
    { "module": "__main__", "line": 12, "column": 14, "endline": 12, "endcolumn": 15, "stmt": [12,5,12,15] },
    { "module": "__main__", "line": 12, "column": 5, "endline": 12, "endcolumn": 12, "stmt": [12,5,12,15] },
    { "module": "__main__", "line": 13, "column": 6, "endline": 13, "endcolumn": 6, "stmt": [13,5,13,13] },
    { "module": "__main__", "line": 13, "column": 6, "endline": 13, "endcolumn": 6, "stmt": [13,5,13,13] },
    { "module": "__main__", "line": 13, "column": 10, "endline": 13, "endcolumn": 13, "stmt": [13,5,13,13] },
    { "module": "__main__", "line": 13, "column": 5, "endline": 13, "endcolumn": 8, "stmt": [13,5,13,13] },
    { "module": "__main__", "line": 11, "column": 3, "endline": 11, "endcolumn": 13, "stmt": [11,3,11,13] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 10, "endcolumn": 35, "stmt": [10,1,10,35] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 3, "stmt": [16,1,16,23] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 23, "stmt": [16,1,16,23] },
    { "module": "__main__", "line": 17, "column": 3, "endline": 17, "endcolumn": 13, "stmt": [17,3,17,13] },
    { "module": "__main__", "line": 18, "column": 6, "endline": 18, "endcolumn": 6, "stmt": [18,5,18,10] },
    { "module": "__main__", "line": 18, "column": 6, "endline": 18, "endcolumn": 6, "stmt": [18,5,18,10] },
    { "module": "__main__", "line": 18, "column": 10, "endline": 18, "endcolumn": 10, "stmt": [18,5,18,10] },
    { "module": "__main__", "line": 18, "column": 10, "endline": 18, "endcolumn": 10, "stmt": [18,5,18,10] },
    { "module": "__main__", "line": 18, "column": 5, "endline": 18, "endcolumn": 8, "stmt": [18,5,18,10] },
    { "module": "__main__", "line": 17, "column": 3, "endline": 17, "endcolumn": 13, "stmt": [17,3,17,13] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 23, "stmt": [16,1,16,23] },
    { "module": "__main__", "line": 24, "column": 1, "endline": 24, "endcolumn": 3, "stmt": [24,1,24,26] },
    { "module": "__main__", "line": 24, "column": 1, "endline": 24, "endcolumn": 26, "stmt": [24,1,24,26] },
    { "module": "__main__", "line": 25, "column": 12, "endline": 25, "endcolumn": 16, "stmt": [25,3,25,16] },
    { "module": "__main__", "line": 25, "column": 12, "endline": 25, "endcolumn": 16, "stmt": [25,3,25,16] },
    { "module": "__main__", "line": 25, "column": 3, "endline": 25, "endcolumn": 10, "stmt": [25,3,25,16] },
    { "module": "__main__", "line": 24, "column": 1, "endline": 24, "endcolumn": 26, "stmt": [24,1,24,26] },
    { "module": "__main__", "line": 27, "column": 1, "endline": 27, "endcolumn": 3, "stmt": [27,1,27,22] },
    { "module": "__main__", "line": 27, "column": 1, "endline": 27, "endcolumn": 22, "stmt": [27,1,27,22] },
    { "module": "__main__", "line": 28, "column": 22, "endline": 28, "endcolumn": 25, "stmt": [28,3,28,27] },
    { "module": "__main__", "line": 28, "column": 9, "endline": 28, "endcolumn": 26, "stmt": [28,3,28,27] },
    { "module": "__main__", "line": 28, "column": 3, "endline": 28, "endcolumn": 7, "stmt": [28,3,28,27] },
    { "module": "__main__", "line": 28, "column": 3, "endline": 28, "endcolumn": 27, "stmt": [28,3,28,27] },
    { "module": "__main__", "line": 27, "column": 1, "endline": 27, "endcolumn": 22, "stmt": [27,1,27,22] },
    { "module": "__main__", "line": 27, "column": 1, "endline": 27, "endcolumn": 22, "stmt": [27,1,27,22] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 3, "stmt": [31,1,31,22] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 22, "stmt": [31,1,31,22] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 26, "stmt": [32,3,32,27] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 19, "stmt": [32,3,32,27] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 19, "stmt": [32,3,32,27] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 26, "stmt": [32,3,32,27] },
    { "module": "__main__", "line": 32, "column": 22, "endline": 32, "endcolumn": 26, "stmt": [32,3,32,27] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 26, "stmt": [32,3,32,27] },
    { "module": "__main__", "line": 32, "column": 3, "endline": 32, "endcolumn": 27, "stmt": [32,3,32,27] },
    { "module": "__main__", "line": 32, "column": 3, "endline": 32, "endcolumn": 27, "stmt": [32,3,32,27] },
    { "module": "__main__", "line": 31, "column": 1, "endline": 31, "endcolumn": 22, "stmt": [31,1,31,22] },
    { "module": "__main__", "line": 38, "column": 28, "endline": 38, "endcolumn": 28, "stmt": [38,1,38,28] },
    { "module": "__main__", "line": 38, "column": 1, "endline": 38, "endcolumn": 26, "stmt": [38,1,38,28] },
    { "module": "__main__", "line": 39, "column": 1, "endline": 39, "endcolumn": 9, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 1, "endline": 39, "endcolumn": 44, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 11, "endline": 39, "endcolumn": 34, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 40, "endline": 39, "endcolumn": 43, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 40, "endline": 39, "endcolumn": 40, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 40, "endline": 39, "endcolumn": 43, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 43, "endline": 39, "endcolumn": 43, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 40, "endline": 39, "endcolumn": 43, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 11, "endline": 39, "endcolumn": 44, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 1, "endline": 39, "endcolumn": 44, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 1, "endline": 39, "endcolumn": 44, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 39, "column": 1, "endline": 39, "endcolumn": 44, "stmt": [39,1,39,44] },
    { "module": "__main__", "line": 41, "column": 8, "endline": 41, "endcolumn": 10, "stmt": [41,1,41,10] },
    { "module": "__main__", "line": 41, "column": 1, "endline": 41, "endcolumn": 6, "stmt": [41,1,41,10] },
    { "module": "__main__", "line": 42, "column": 11, "endline": 42, "endcolumn": 11, "stmt": [42,1,42,23] },
    { "module": "__main__", "line": 42, "column": 14, "endline": 42, "endcolumn": 22, "stmt": [42,1,42,23] },
    { "module": "__main__", "line": 42, "column": 11, "endline": 42, "endcolumn": 22, "stmt": [42,1,42,23] },
    { "module": "__main__", "line": 42, "column": 1, "endline": 42, "endcolumn": 3, "stmt": [42,1,42,23] },
    { "module": "__main__", "line": 42, "column": 1, "endline": 42, "endcolumn": 3, "stmt": [42,1,42,23] },
    { "module": "__main__", "line": 42, "column": 1, "endline": 42, "endcolumn": 3, "stmt": [42,1,42,23] },
    { "module": "__main__", "line": 43, "column": 3, "endline": 43, "endcolumn": 6, "stmt": [43,3,43,17] },
    { "module": "__main__", "line": 43, "column": 8, "endline": 43, "endcolumn": 8, "stmt": [43,3,43,17] },
    { "module": "__main__", "line": 43, "column": 8, "endline": 43, "endcolumn": 8, "stmt": [43,3,43,17] },
    { "module": "__main__", "line": 43, "column": 3, "endline": 43, "endcolumn": 9, "stmt": [43,3,43,17] },
    { "module": "__main__", "line": 43, "column": 13, "endline": 43, "endcolumn": 17, "stmt": [43,3,43,17] },
    { "module": "__main__", "line": 43, "column": 3, "endline": 43, "endcolumn": 11, "stmt": [43,3,43,17] },
    { "module": "__main__", "line": 42, "column": 23, "endline": 42, "endcolumn": 23, "stmt": [42,1,42,23] },
    { "module": "__main__", "line": 45, "column": 15, "endline": 45, "endcolumn": 16, "stmt": [45,1,45,16] },
    { "module": "__main__", "line": 45, "column": 15, "endline": 45, "endcolumn": 16, "stmt": [45,1,45,16] },
    { "module": "__main__", "line": 45, "column": 1, "endline": 45, "endcolumn": 13, "stmt": [45,1,45,16] },
    { "module": "__main__", "line": 47, "column": 15, "endline": 47, "endcolumn": 16, "stmt": [47,1,47,16] },
    { "module": "__main__", "line": 47, "column": 11, "endline": 47, "endcolumn": 16, "stmt": [47,1,47,16] },
    { "module": "__main__", "line": 47, "column": 1, "endline": 47, "endcolumn": 9, "stmt": [47,1,47,16] },
    { "module": "__main__", "line": 49, "column": 1, "endline": 49, "endcolumn": 3, "stmt": [49,1,49,16] },
    { "module": "__main__", "line": 49, "column": 1, "endline": 49, "endcolumn": 16, "stmt": [49,1,49,16] },
    { "module": "__main__", "line": 50, "column": 13, "endline": 50, "endcolumn": 21, "stmt": [50,3,50,22] },
    { "module": "__main__", "line": 50, "column": 18, "endline": 50, "endcolumn": 20, "stmt": [50,3,50,22] },
    { "module": "__main__", "line": 50, "column": 13, "endline": 50, "endcolumn": 21, "stmt": [50,3,50,22] },
    { "module": "__main__", "line": 50, "column": 13, "endline": 50, "endcolumn": 21, "stmt": [50,3,50,22] },
    { "module": "__main__", "line": 50, "column": 3, "endline": 50, "endcolumn": 7, "stmt": [50,3,50,22] },
    { "module": "__main__", "line": 51, "column": 18, "endline": 51, "endcolumn": 24, "stmt": [51,5,51,25] },
    { "module": "__main__", "line": 51, "column": 5, "endline": 51, "endcolumn": 25, "stmt": [51,5,51,25] },
    { "module": "__main__", "line": 51, "column": 5, "endline": 51, "endcolumn": 25, "stmt": [51,5,51,25] },
    { "module": "__main__", "line": 53, "column": 16, "endline": 53, "endcolumn": 70, "stmt": [53,16,53,70] },
    { "module": "__main__", "line": 53, "column": 43, "endline": 53, "endcolumn": 66, "stmt": [53,16,53,70] },
    { "module": "__main__", "line": 53, "column": 70, "endline": 53, "endcolumn": 70, "stmt": [53,16,53,70] },
    { "module": "__main__", "line": 53, "column": 43, "endline": 53, "endcolumn": 70, "stmt": [53,16,53,70] },
    { "module": "__main__", "line": 53, "column": 16, "endline": 53, "endcolumn": 41, "stmt": [53,16,53,70] },
    { "module": "__main__", "line": 53, "column": 16, "endline": 53, "endcolumn": 70, "stmt": [53,16,53,70] },
    { "module": "__main__", "line": 56, "column": 5, "endline": 56, "endcolumn": 28, "stmt": [56,5,56,28] },
    { "module": "__main__", "line": 56, "column": 25, "endline": 56, "endcolumn": 27, "stmt": [56,5,56,28] },
    { "module": "__main__", "line": 56, "column": 21, "endline": 56, "endcolumn": 27, "stmt": [56,5,56,28] },
    { "module": "__main__", "line": 56, "column": 5, "endline": 56, "endcolumn": 28, "stmt": [56,5,56,28] },
    { "module": "__main__", "line": 56, "column": 5, "endline": 56, "endcolumn": 18, "stmt": [56,5,56,28] },
    { "module": "__main__", "line": 57, "column": 11, "endline": 57, "endcolumn": 21, "stmt": [57,5,57,21] },
    { "module": "__main__", "line": 57, "column": 5, "endline": 57, "endcolumn": 21, "stmt": [57,5,57,21] },
    { "module": "__main__", "line": 59, "column": 16, "endline": 59, "endcolumn": 70, "stmt": [59,16,59,70] },
    { "module": "__main__", "line": 59, "column": 43, "endline": 59, "endcolumn": 66, "stmt": [59,16,59,70] },
    { "module": "__main__", "line": 59, "column": 70, "endline": 59, "endcolumn": 70, "stmt": [59,16,59,70] },
    { "module": "__main__", "line": 59, "column": 43, "endline": 59, "endcolumn": 70, "stmt": [59,16,59,70] },
    { "module": "__main__", "line": 59, "column": 16, "endline": 59, "endcolumn": 41, "stmt": [59,16,59,70] },
    { "module": "__main__", "line": 59, "column": 16, "endline": 59, "endcolumn": 70, "stmt": [59,16,59,70] },
    { "module": "__main__", "line": 61, "column": 5, "endline": 61, "endcolumn": 8, "stmt": [61,5,61,20] },
    { "module": "__main__", "line": 61, "column": 10, "endline": 61, "endcolumn": 12, "stmt": [61,5,61,20] },
    { "module": "__main__", "line": 61, "column": 5, "endline": 61, "endcolumn": 13, "stmt": [61,5,61,20] },
    { "module": "__main__", "line": 61, "column": 17, "endline": 61, "endcolumn": 20, "stmt": [61,5,61,20] },
    { "module": "__main__", "line": 61, "column": 5, "endline": 61, "endcolumn": 15, "stmt": [61,5,61,20] },
    { "module": "__main__", "line": 62, "column": 18, "endline": 62, "endcolumn": 24, "stmt": [62,5,62,25] },
    { "module": "__main__", "line": 62, "column": 5, "endline": 62, "endcolumn": 25, "stmt": [62,5,62,25] },
    { "module": "__main__", "line": 62, "column": 5, "endline": 62, "endcolumn": 25, "stmt": [62,5,62,25] },
    { "module": "__main__", "line": 50, "column": 3, "endline": 50, "endcolumn": 22, "stmt": [50,3,50,22] },
    { "module": "__main__", "line": 49, "column": 1, "endline": 49, "endcolumn": 16, "stmt": [49,1,49,16] },
    { "module": "__main__", "line": 49, "column": 1, "endline": 49, "endcolumn": 16, "stmt": [49,1,49,16] },
    { "module": "__main__", "line": 64, "column": 11, "endline": 64, "endcolumn": 11, "stmt": [64,1,64,23] },
    { "module": "__main__", "line": 64, "column": 14, "endline": 64, "endcolumn": 22, "stmt": [64,1,64,23] },
    { "module": "__main__", "line": 64, "column": 11, "endline": 64, "endcolumn": 22, "stmt": [64,1,64,23] },
    { "module": "__main__", "line": 64, "column": 1, "endline": 64, "endcolumn": 3, "stmt": [64,1,64,23] },
    { "module": "__main__", "line": 64, "column": 1, "endline": 64, "endcolumn": 3, "stmt": [64,1,64,23] },
    { "module": "__main__", "line": 64, "column": 1, "endline": 64, "endcolumn": 3, "stmt": [64,1,64,23] },
    { "module": "__main__", "line": 65, "column": 9, "endline": 65, "endcolumn": 14, "stmt": [65,3,65,17] },
    { "module": "__main__", "line": 65, "column": 16, "endline": 65, "endcolumn": 16, "stmt": [65,3,65,17] },
    { "module": "__main__", "line": 65, "column": 16, "endline": 65, "endcolumn": 16, "stmt": [65,3,65,17] },
    { "module": "__main__", "line": 65, "column": 9, "endline": 65, "endcolumn": 17, "stmt": [65,3,65,17] },
    { "module": "__main__", "line": 65, "column": 3, "endline": 65, "endcolumn": 17, "stmt": [65,3,65,17] },
    { "module": "__main__", "line": 65, "column": 3, "endline": 65, "endcolumn": 17, "stmt": [65,3,65,17] },
    { "module": "__main__", "line": 64, "column": 23, "endline": 64, "endcolumn": 23, "stmt": [64,1,64,23] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 67, "endcolumn": 6, "stmt": [10,1,67,6] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 67, "endcolumn": 6, "stmt": [10,1,67,6] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 67, "endcolumn": 6, "stmt": [10,1,67,6] }
  ]
}
