{
  "labels": {
    "__end__": 149
  },
  "modules": {
    "__main__": {
      "file": "petersons.hny",
      "lines": [
        "# show two possible runs: one unsafe, one safe",
        "run_safely = choose({True, False}) # note this variable is read-only, so it's safe to read it from multiple threads without any fancy shenanigans",
        "print \"Run with Peterson's: \" + (str run_safely)",
        "",
        "# sequentially update a global value tracking how many threads are created",
        "thread_count = 0",
        "",
        "# demonstrate race conditions that occur when threads UNSAFELY access shared vars",
        "sequential unsafe_demo # here, `sequential` prevents a basic data access race condition! the harmony compiler disallows this",
        "unsafe_demo = \"\" ",
        "",
        "# SAFELY shared critical resources between threads",
        "test_output = \"\"",
        "",
        "# assert that at most two threads are created with `invariant`",
        "invariant thread_count in {0, 1, 2}",
        "",
        "sequential flags, turn, done # def keyword: `sequential` means cache-coherent, atomic read/writes (java's volatile)",
        "flags = [False, False] # peterson's: indicates intent to enter the critical section",
        "turn = choose({0, 1}) # peterson's: indicates which thread should enter the critical section first",
        "done = [False, False] # indicates that a thread ran once (if you don't use such a variable, the threads will run forever)",
        "",
        "def thread(pid): # concurrently run a thread",
        "",
        "    global unsafe_demo, test_output # here, global isn't strictly necessary (there is no local var with the same name)",
        "    unsafe_demo += str pid # unsafe",
        "    if not run_safely:",
        "      print unsafe_demo",
        "",
        "    while not done[pid]: # spin until the thread executed once!",
        "        flags[pid] = True # peterson's: indicate that you want to enter the critical section",
        "        turn = 1 - pid # peterson's: give the other thread a chance to enter the critical section first though",
        "        await (not flags[1-pid]) or (turn==pid) # def keyword: `await` makes a thread wait until the condition is true",
        "                                                # peterson's: wait until the other thread is ready or it's your turn",
        "",
        "        # peterson's: start critical section here!        ",
        "        test_output += str pid",
        "        if run_safely:",
        "          print test_output",
        "        # peterson's: end critical section here!",
        "",
        "        done[pid] = True # indicate that the thread is done. if you don't do this, the threads will run forever! (which is what the slides do... because they don't print intermediate results, so the resulting model doesn't care)",
        "        flags[pid] = False # petersen's: indicate that you're done with the critical section",
        "",
        "def spawn_thread(pid): # sequentially spawn a thread",
        "    global thread_count # def keyword: `global` means to access the global instance of the variable (not a locally scoped one)",
        "    thread_count += 1",
        "    print \"Total threads: \" + (str thread_count)",
        "    spawn thread(pid)",
        "",
        "spawn_thread(0)",
        "spawn_thread(1)"
      ],
      "identifiers": {
        "pid": "local-const",
        "this": "local-var",
        "thread": "constant",
        "spawn_thread": "constant",
        "run_safely": "global",
        "thread_count": "global",
        "unsafe_demo": "global",
        "test_output": "global",
        "flags": "global",
        "turn": "global",
        "done": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "run_safely"}] },
    { "op": "Push", "value": { "type": "atom", "value": "Run with Peterson's: " } },
    { "op": "Load", "value": [{ "type": "atom", "value": "run_safely"}] },
    { "op": "Nary", "arity": 1, "value": "str" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Store", "value": [{ "type": "atom", "value": "thread_count"}] },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "unsafe_demo" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "atom", "value": "" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "unsafe_demo"}] },
    { "op": "Push", "value": { "type": "atom", "value": "" } },
    { "op": "Store", "value": [{ "type": "atom", "value": "test_output"}] },
    { "op": "Jump", "pc": "34" },
    { "op": "Frame", "name": "invariant", "args": "()" },
    { "op": "Load", "value": [{ "type": "atom", "value": "thread_count"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "in" },
    { "op": "Assert" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Invariant", "pre": "False", "pc": "22" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "turn" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "done" }] } },
    { "op": "Sequential" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "flags"}] },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Choose" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "done"}] },
    { "op": "Jump", "pc": "141" },
    { "op": "Frame", "name": "thread", "args": "pid" },
    { "op": "Load", "value": [{ "type": "atom", "value": "unsafe_demo"}] },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 1, "value": "str" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "unsafe_demo"}] },
    { "op": "Load", "value": [{ "type": "atom", "value": "run_safely"}] },
    { "op": "JumpCond", "pc": "71", "cond": { "type": "bool", "value": "True" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "unsafe_demo"}] },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "done" }] } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "121", "cond": { "type": "bool", "value": "True" } },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Store", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Load" },
    { "op": "Nary", "arity": 1, "value": "not" },
    { "op": "JumpCond", "pc": "97", "cond": { "type": "bool", "value": "True" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "turn"}] },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Jump", "pc": "98" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "JumpCond", "pc": "85", "cond": { "type": "bool", "value": "False" } },
    { "op": "Jump", "pc": "101" },
    { "op": "Jump", "pc": "85" },
    { "op": "Load", "value": [{ "type": "atom", "value": "test_output"}] },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 1, "value": "str" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "test_output"}] },
    { "op": "Load", "value": [{ "type": "atom", "value": "run_safely"}] },
    { "op": "JumpCond", "pc": "110", "cond": { "type": "bool", "value": "False" } },
    { "op": "Load", "value": [{ "type": "atom", "value": "test_output"}] },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "done" }] } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "True" } },
    { "op": "Store" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "flags" }] } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "Store" },
    { "op": "Jump", "pc": "71" },
    { "op": "DelVar", "value": "pid" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Jump", "pc": "141" },
    { "op": "Frame", "name": "spawn_thread", "args": "pid" },
    { "op": "Load", "value": [{ "type": "atom", "value": "thread_count"}] },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "thread_count"}] },
    { "op": "Push", "value": { "type": "atom", "value": "Total threads: " } },
    { "op": "Load", "value": [{ "type": "atom", "value": "thread_count"}] },
    { "op": "Nary", "arity": 1, "value": "str" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Print" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "61" }, "args": [] } },
    { "op": "LoadVar", "value": "pid" },
    { "op": "DelVar", "value": "pid" },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "Push", "value": { "type": "dict", "value": [] } },
    { "op": "Spawn", "eternal": "False" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Apply", "value": { "type": "pc", "value": "124" } },
    { "op": "Pop" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Apply", "value": { "type": "pc", "value": "124" } },
    { "op": "Pop" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Push {}","push constant {}"],
    ["Push True","push constant True"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push False","push constant False"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store run_safely","pop a value and store it in shared variable run_safely"],
    ["Push \"Run with Peterson's: \"","push constant \"Run with Peterson's: \""],
    ["Load run_safely","push value of shared variable run_safely"],
    ["1-ary str","pop 1 value and push the result of applying str"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Print","pop a value and add to print history"],
    ["Push 0","push constant 0"],
    ["Store thread_count","pop a value and store it in shared variable thread_count"],
    ["Push ?unsafe_demo","push constant ?unsafe_demo"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push \"\"","push constant \"\""],
    ["Store unsafe_demo","pop a value and store it in shared variable unsafe_demo"],
    ["Push \"\"","push constant \"\""],
    ["Store test_output","pop a value and store it in shared variable test_output"],
    ["Jump 34","jump over invariant definition: set program counter to 34"],
    ["Frame invariant()","start of method invariant"],
    ["Load thread_count","push value of shared variable thread_count"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 2","push constant 2"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary in","pop 2 values and push the result of applying in"],
    ["Assert","pop a condition and raise exception if condition is false"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Invariant 22","test invariant"],
    ["Push ?flags","push constant ?flags"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?turn","push constant ?turn"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ?done","push constant ?done"],
    ["Sequential","sequential consistency for variable on top of stack"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store flags","pop a value and store it in shared variable flags"],
    ["Push {}","push constant {}"],
    ["Push 0","push constant 0"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Push 1","push constant 1"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["Choose","pop a set value and push one of its elements"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push False","push constant False"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store done","pop a value and store it in shared variable done"],
    ["Jump 141","jump over method definition: set program counter to 141"],
    ["Frame thread(pid)","start of method thread"],
    ["Load unsafe_demo","push value of shared variable unsafe_demo"],
    ["LoadVar pid","push the value of pid"],
    ["1-ary str","pop 1 value and push the result of applying str"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store unsafe_demo","pop a value and store it in shared variable unsafe_demo"],
    ["Load run_safely","push value of shared variable run_safely"],
    ["JumpCond True 71","pop a value and jump to 71 if the value is True"],
    ["Load unsafe_demo","push value of shared variable unsafe_demo"],
    ["Print","pop a value and add to print history"],
    ["Push ?done","push constant ?done"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond True 121","pop a value and jump to 121 if the value is True"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push 1","push constant 1"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["Store turn","pop a value and store it in shared variable turn"],
    ["Push ?flags","push constant ?flags"],
    ["Push 1","push constant 1"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Load","pop an address and push the value at the address"],
    ["1-ary not","pop 1 value and push the result of applying not"],
    ["JumpCond True 97","pop a value and jump to 97 if the value is True"],
    ["Load turn","push value of shared variable turn"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["Jump 98","set program counter to 98"],
    ["Push True","push constant True"],
    ["JumpCond False 85","pop a value and jump to 85 if the value is False"],
    ["Jump 101","set program counter to 101"],
    ["Jump 85","set program counter to 85"],
    ["Load test_output","push value of shared variable test_output"],
    ["LoadVar pid","push the value of pid"],
    ["1-ary str","pop 1 value and push the result of applying str"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store test_output","pop a value and store it in shared variable test_output"],
    ["Load run_safely","push value of shared variable run_safely"],
    ["JumpCond False 110","pop a value and jump to 110 if the value is False"],
    ["Load test_output","push value of shared variable test_output"],
    ["Print","pop a value and add to print history"],
    ["Push ?done","push constant ?done"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push True","push constant True"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Push ?flags","push constant ?flags"],
    ["LoadVar pid","push the value of pid"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push False","push constant False"],
    ["Store","pop a value and an address and store the value at the address"],
    ["Jump 71","set program counter to 71"],
    ["DelVar pid","delete method variable pid"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Jump 141","jump over method definition: set program counter to 141"],
    ["Frame spawn_thread(pid)","start of method spawn_thread"],
    ["Load thread_count","push value of shared variable thread_count"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store thread_count","pop a value and store it in shared variable thread_count"],
    ["Push \"Total threads: \"","push constant \"Total threads: \""],
    ["Load thread_count","push value of shared variable thread_count"],
    ["1-ary str","pop 1 value and push the result of applying str"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Print","pop a value and add to print history"],
    ["Push ?PC(61)","push constant ?PC(61)"],
    ["LoadVar pid","push the value of pid"],
    ["DelVar pid","delete method variable pid"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["Push {:}","push constant {:}"],
    ["Spawn","pop thread-local state, argument, and pc and spawn a new thread"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["Push 0","push constant 0"],
    ["Apply PC(124)","call method PC(124)"],
    ["Pop","discard the top value on the stack"],
    ["Push 1","push constant 1"],
    ["Apply PC(124)","call method PC(124)"],
    ["Pop","discard the top value on the stack"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 2, "column": 1, "endline": 52, "endcolumn": 22, "stmt": [2,1,52,22] },
    { "module": "__main__", "line": 2, "column": 22, "endline": 2, "endcolumn": 32, "stmt": [2,1,2,34] },
    { "module": "__main__", "line": 2, "column": 22, "endline": 2, "endcolumn": 25, "stmt": [2,1,2,34] },
    { "module": "__main__", "line": 2, "column": 22, "endline": 2, "endcolumn": 32, "stmt": [2,1,2,34] },
    { "module": "__main__", "line": 2, "column": 28, "endline": 2, "endcolumn": 32, "stmt": [2,1,2,34] },
    { "module": "__main__", "line": 2, "column": 22, "endline": 2, "endcolumn": 32, "stmt": [2,1,2,34] },
    { "module": "__main__", "line": 2, "column": 14, "endline": 2, "endcolumn": 34, "stmt": [2,1,2,34] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 2, "endcolumn": 12, "stmt": [2,1,2,34] },
    { "module": "__main__", "line": 3, "column": 7, "endline": 3, "endcolumn": 29, "stmt": [3,1,3,48] },
    { "module": "__main__", "line": 3, "column": 38, "endline": 3, "endcolumn": 47, "stmt": [3,1,3,48] },
    { "module": "__main__", "line": 3, "column": 34, "endline": 3, "endcolumn": 47, "stmt": [3,1,3,48] },
    { "module": "__main__", "line": 3, "column": 7, "endline": 3, "endcolumn": 48, "stmt": [3,1,3,48] },
    { "module": "__main__", "line": 3, "column": 1, "endline": 3, "endcolumn": 48, "stmt": [3,1,3,48] },
    { "module": "__main__", "line": 6, "column": 16, "endline": 6, "endcolumn": 16, "stmt": [6,1,6,16] },
    { "module": "__main__", "line": 6, "column": 1, "endline": 6, "endcolumn": 14, "stmt": [6,1,6,16] },
    { "module": "__main__", "line": 9, "column": 12, "endline": 9, "endcolumn": 22, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 9, "column": 1, "endline": 9, "endcolumn": 22, "stmt": [9,1,9,22] },
    { "module": "__main__", "line": 10, "column": 15, "endline": 10, "endcolumn": 16, "stmt": [10,1,10,16] },
    { "module": "__main__", "line": 10, "column": 1, "endline": 10, "endcolumn": 13, "stmt": [10,1,10,16] },
    { "module": "__main__", "line": 13, "column": 15, "endline": 13, "endcolumn": 16, "stmt": [13,1,13,16] },
    { "module": "__main__", "line": 13, "column": 1, "endline": 13, "endcolumn": 13, "stmt": [13,1,13,16] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 9, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 35, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 11, "endline": 16, "endcolumn": 22, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 28, "endline": 16, "endcolumn": 34, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 28, "endline": 16, "endcolumn": 28, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 28, "endline": 16, "endcolumn": 34, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 31, "endline": 16, "endcolumn": 31, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 28, "endline": 16, "endcolumn": 34, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 34, "endline": 16, "endcolumn": 34, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 28, "endline": 16, "endcolumn": 34, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 11, "endline": 16, "endcolumn": 35, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 35, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 35, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 16, "column": 1, "endline": 16, "endcolumn": 35, "stmt": [16,1,16,35] },
    { "module": "__main__", "line": 18, "column": 12, "endline": 18, "endcolumn": 16, "stmt": [18,1,18,28] },
    { "module": "__main__", "line": 18, "column": 1, "endline": 18, "endcolumn": 28, "stmt": [18,1,18,28] },
    { "module": "__main__", "line": 18, "column": 19, "endline": 18, "endcolumn": 22, "stmt": [18,1,18,28] },
    { "module": "__main__", "line": 18, "column": 1, "endline": 18, "endcolumn": 28, "stmt": [18,1,18,28] },
    { "module": "__main__", "line": 18, "column": 25, "endline": 18, "endcolumn": 28, "stmt": [18,1,18,28] },
    { "module": "__main__", "line": 18, "column": 1, "endline": 18, "endcolumn": 28, "stmt": [18,1,18,28] },
    { "module": "__main__", "line": 19, "column": 10, "endline": 19, "endcolumn": 21, "stmt": [19,1,19,22] },
    { "module": "__main__", "line": 19, "column": 10, "endline": 19, "endcolumn": 14, "stmt": [19,1,19,22] },
    { "module": "__main__", "line": 19, "column": 10, "endline": 19, "endcolumn": 21, "stmt": [19,1,19,22] },
    { "module": "__main__", "line": 19, "column": 17, "endline": 19, "endcolumn": 21, "stmt": [19,1,19,22] },
    { "module": "__main__", "line": 19, "column": 10, "endline": 19, "endcolumn": 21, "stmt": [19,1,19,22] },
    { "module": "__main__", "line": 19, "column": 1, "endline": 19, "endcolumn": 7, "stmt": [19,1,19,22] },
    { "module": "__main__", "line": 20, "column": 16, "endline": 20, "endcolumn": 19, "stmt": [20,1,20,21] },
    { "module": "__main__", "line": 20, "column": 16, "endline": 20, "endcolumn": 16, "stmt": [20,1,20,21] },
    { "module": "__main__", "line": 20, "column": 16, "endline": 20, "endcolumn": 19, "stmt": [20,1,20,21] },
    { "module": "__main__", "line": 20, "column": 19, "endline": 20, "endcolumn": 19, "stmt": [20,1,20,21] },
    { "module": "__main__", "line": 20, "column": 16, "endline": 20, "endcolumn": 19, "stmt": [20,1,20,21] },
    { "module": "__main__", "line": 20, "column": 8, "endline": 20, "endcolumn": 21, "stmt": [20,1,20,21] },
    { "module": "__main__", "line": 20, "column": 1, "endline": 20, "endcolumn": 6, "stmt": [20,1,20,21] },
    { "module": "__main__", "line": 21, "column": 9, "endline": 21, "endcolumn": 20, "stmt": [21,1,21,21] },
    { "module": "__main__", "line": 21, "column": 9, "endline": 21, "endcolumn": 13, "stmt": [21,1,21,21] },
    { "module": "__main__", "line": 21, "column": 9, "endline": 21, "endcolumn": 20, "stmt": [21,1,21,21] },
    { "module": "__main__", "line": 21, "column": 16, "endline": 21, "endcolumn": 20, "stmt": [21,1,21,21] },
    { "module": "__main__", "line": 21, "column": 9, "endline": 21, "endcolumn": 20, "stmt": [21,1,21,21] },
    { "module": "__main__", "line": 21, "column": 1, "endline": 21, "endcolumn": 6, "stmt": [21,1,21,21] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 3, "stmt": [23,1,23,16] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 16, "stmt": [23,1,23,16] },
    { "module": "__main__", "line": 26, "column": 5, "endline": 26, "endcolumn": 26, "stmt": [26,5,26,26] },
    { "module": "__main__", "line": 26, "column": 24, "endline": 26, "endcolumn": 26, "stmt": [26,5,26,26] },
    { "module": "__main__", "line": 26, "column": 20, "endline": 26, "endcolumn": 26, "stmt": [26,5,26,26] },
    { "module": "__main__", "line": 26, "column": 5, "endline": 26, "endcolumn": 26, "stmt": [26,5,26,26] },
    { "module": "__main__", "line": 26, "column": 5, "endline": 26, "endcolumn": 18, "stmt": [26,5,26,26] },
    { "module": "__main__", "line": 27, "column": 12, "endline": 27, "endcolumn": 21, "stmt": [27,5,27,22] },
    { "module": "__main__", "line": 27, "column": 5, "endline": 27, "endcolumn": 6, "stmt": [27,5,27,22] },
    { "module": "__main__", "line": 28, "column": 13, "endline": 28, "endcolumn": 23, "stmt": [28,7,28,23] },
    { "module": "__main__", "line": 28, "column": 7, "endline": 28, "endcolumn": 23, "stmt": [28,7,28,23] },
    { "module": "__main__", "line": 30, "column": 15, "endline": 30, "endcolumn": 23, "stmt": [30,5,30,24] },
    { "module": "__main__", "line": 30, "column": 20, "endline": 30, "endcolumn": 22, "stmt": [30,5,30,24] },
    { "module": "__main__", "line": 30, "column": 15, "endline": 30, "endcolumn": 23, "stmt": [30,5,30,24] },
    { "module": "__main__", "line": 30, "column": 15, "endline": 30, "endcolumn": 23, "stmt": [30,5,30,24] },
    { "module": "__main__", "line": 30, "column": 5, "endline": 30, "endcolumn": 9, "stmt": [30,5,30,24] },
    { "module": "__main__", "line": 31, "column": 9, "endline": 31, "endcolumn": 13, "stmt": [31,9,31,25] },
    { "module": "__main__", "line": 31, "column": 15, "endline": 31, "endcolumn": 17, "stmt": [31,9,31,25] },
    { "module": "__main__", "line": 31, "column": 9, "endline": 31, "endcolumn": 18, "stmt": [31,9,31,25] },
    { "module": "__main__", "line": 31, "column": 22, "endline": 31, "endcolumn": 25, "stmt": [31,9,31,25] },
    { "module": "__main__", "line": 31, "column": 9, "endline": 31, "endcolumn": 20, "stmt": [31,9,31,25] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 16, "stmt": [32,9,32,22] },
    { "module": "__main__", "line": 32, "column": 20, "endline": 32, "endcolumn": 22, "stmt": [32,9,32,22] },
    { "module": "__main__", "line": 32, "column": 16, "endline": 32, "endcolumn": 22, "stmt": [32,9,32,22] },
    { "module": "__main__", "line": 32, "column": 9, "endline": 32, "endcolumn": 14, "stmt": [32,9,32,22] },
    { "module": "__main__", "line": 33, "column": 20, "endline": 33, "endcolumn": 31, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 26, "endline": 33, "endcolumn": 26, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 28, "endline": 33, "endcolumn": 30, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 26, "endline": 33, "endcolumn": 30, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 20, "endline": 33, "endcolumn": 31, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 20, "endline": 33, "endcolumn": 31, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 16, "endline": 33, "endcolumn": 31, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 15, "endline": 33, "endcolumn": 47, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 38, "endline": 33, "endcolumn": 41, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 44, "endline": 33, "endcolumn": 46, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 38, "endline": 33, "endcolumn": 46, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 34, "endline": 33, "endcolumn": 35, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 15, "endline": 33, "endcolumn": 47, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 9, "endline": 33, "endcolumn": 47, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 47, "endline": 33, "endcolumn": 47, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 33, "column": 47, "endline": 33, "endcolumn": 47, "stmt": [33,9,33,47] },
    { "module": "__main__", "line": 37, "column": 9, "endline": 37, "endcolumn": 30, "stmt": [37,9,37,30] },
    { "module": "__main__", "line": 37, "column": 28, "endline": 37, "endcolumn": 30, "stmt": [37,9,37,30] },
    { "module": "__main__", "line": 37, "column": 24, "endline": 37, "endcolumn": 30, "stmt": [37,9,37,30] },
    { "module": "__main__", "line": 37, "column": 9, "endline": 37, "endcolumn": 30, "stmt": [37,9,37,30] },
    { "module": "__main__", "line": 37, "column": 9, "endline": 37, "endcolumn": 22, "stmt": [37,9,37,30] },
    { "module": "__main__", "line": 38, "column": 12, "endline": 38, "endcolumn": 21, "stmt": [38,9,38,22] },
    { "module": "__main__", "line": 38, "column": 9, "endline": 38, "endcolumn": 10, "stmt": [38,9,38,22] },
    { "module": "__main__", "line": 39, "column": 17, "endline": 39, "endcolumn": 27, "stmt": [39,11,39,27] },
    { "module": "__main__", "line": 39, "column": 11, "endline": 39, "endcolumn": 27, "stmt": [39,11,39,27] },
    { "module": "__main__", "line": 42, "column": 9, "endline": 42, "endcolumn": 12, "stmt": [42,9,42,24] },
    { "module": "__main__", "line": 42, "column": 14, "endline": 42, "endcolumn": 16, "stmt": [42,9,42,24] },
    { "module": "__main__", "line": 42, "column": 9, "endline": 42, "endcolumn": 17, "stmt": [42,9,42,24] },
    { "module": "__main__", "line": 42, "column": 21, "endline": 42, "endcolumn": 24, "stmt": [42,9,42,24] },
    { "module": "__main__", "line": 42, "column": 9, "endline": 42, "endcolumn": 19, "stmt": [42,9,42,24] },
    { "module": "__main__", "line": 43, "column": 9, "endline": 43, "endcolumn": 13, "stmt": [43,9,43,26] },
    { "module": "__main__", "line": 43, "column": 15, "endline": 43, "endcolumn": 17, "stmt": [43,9,43,26] },
    { "module": "__main__", "line": 43, "column": 9, "endline": 43, "endcolumn": 18, "stmt": [43,9,43,26] },
    { "module": "__main__", "line": 43, "column": 22, "endline": 43, "endcolumn": 26, "stmt": [43,9,43,26] },
    { "module": "__main__", "line": 43, "column": 9, "endline": 43, "endcolumn": 20, "stmt": [43,9,43,26] },
    { "module": "__main__", "line": 30, "column": 5, "endline": 30, "endcolumn": 24, "stmt": [30,5,30,24] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 16, "stmt": [23,1,23,16] },
    { "module": "__main__", "line": 23, "column": 1, "endline": 23, "endcolumn": 16, "stmt": [23,1,23,16] },
    { "module": "__main__", "line": 45, "column": 1, "endline": 45, "endcolumn": 3, "stmt": [45,1,45,22] },
    { "module": "__main__", "line": 45, "column": 1, "endline": 45, "endcolumn": 22, "stmt": [45,1,45,22] },
    { "module": "__main__", "line": 47, "column": 5, "endline": 47, "endcolumn": 21, "stmt": [47,5,47,21] },
    { "module": "__main__", "line": 47, "column": 21, "endline": 47, "endcolumn": 21, "stmt": [47,5,47,21] },
    { "module": "__main__", "line": 47, "column": 5, "endline": 47, "endcolumn": 21, "stmt": [47,5,47,21] },
    { "module": "__main__", "line": 47, "column": 5, "endline": 47, "endcolumn": 19, "stmt": [47,5,47,21] },
    { "module": "__main__", "line": 48, "column": 11, "endline": 48, "endcolumn": 27, "stmt": [48,5,48,48] },
    { "module": "__main__", "line": 48, "column": 36, "endline": 48, "endcolumn": 47, "stmt": [48,5,48,48] },
    { "module": "__main__", "line": 48, "column": 32, "endline": 48, "endcolumn": 47, "stmt": [48,5,48,48] },
    { "module": "__main__", "line": 48, "column": 11, "endline": 48, "endcolumn": 48, "stmt": [48,5,48,48] },
    { "module": "__main__", "line": 48, "column": 5, "endline": 48, "endcolumn": 48, "stmt": [48,5,48,48] },
    { "module": "__main__", "line": 49, "column": 11, "endline": 49, "endcolumn": 16, "stmt": [49,5,49,21] },
    { "module": "__main__", "line": 49, "column": 18, "endline": 49, "endcolumn": 20, "stmt": [49,5,49,21] },
    { "module": "__main__", "line": 49, "column": 18, "endline": 49, "endcolumn": 20, "stmt": [49,5,49,21] },
    { "module": "__main__", "line": 49, "column": 11, "endline": 49, "endcolumn": 21, "stmt": [49,5,49,21] },
    { "module": "__main__", "line": 49, "column": 5, "endline": 49, "endcolumn": 21, "stmt": [49,5,49,21] },
    { "module": "__main__", "line": 49, "column": 5, "endline": 49, "endcolumn": 21, "stmt": [49,5,49,21] },
    { "module": "__main__", "line": 45, "column": 1, "endline": 45, "endcolumn": 22, "stmt": [45,1,45,22] },
    { "module": "__main__", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,1,51,15] },
    { "module": "__main__", "line": 51, "column": 1, "endline": 51, "endcolumn": 15, "stmt": [51,1,51,15] },
    { "module": "__main__", "line": 51, "column": 1, "endline": 51, "endcolumn": 15, "stmt": [51,1,51,15] },
    { "module": "__main__", "line": 52, "column": 14, "endline": 52, "endcolumn": 14, "stmt": [52,1,52,15] },
    { "module": "__main__", "line": 52, "column": 1, "endline": 52, "endcolumn": 15, "stmt": [52,1,52,15] },
    { "module": "__main__", "line": 52, "column": 1, "endline": 52, "endcolumn": 15, "stmt": [52,1,52,15] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 52, "endcolumn": 22, "stmt": [2,1,52,22] },
    { "module": "__main__", "line": 2, "column": 1, "endline": 52, "endcolumn": 22, "stmt": [2,1,52,22] }
  ]
}
